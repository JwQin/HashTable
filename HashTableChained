package dict;

import list.*;
public class HashTableChained implements Dictionary {
	
	private EntryList[] table;
	private int capacity;
	private int size;

	
	  /** 
	   *  Construct a new empty hash table intended to hold roughly sizeEstimate
	   *  entries.  (The precise number of buckets is up to you, but we recommend
	   *  you use a prime number, and shoot for a load factor between 0.5 and 1.)
	   **/

	  public HashTableChained(int sizeEstimate) {
	    // Your solution here.
	      capacity = sizeEstimate;
	       table = new EntryList[sizeEstimate];
	  }

	  /** 
	   *  Construct a new empty hash table with a default size.  Say, a prime in
	   *  the neighborhood of 100.
	   **/

	  public HashTableChained() {
	      capacity = 101;
	       table = new EntryList[101];
	  }

	  /**
	   *  Converts a hash code in the range Integer.MIN_VALUE...Integer.MAX_VALUE
	   *  to a value in the range 0...(size of hash table) - 1.
	   *
	   *  This function should have package protection (so we can test it), and
	   *  should be used by insert, find, and remove.
	   **/

	  public String toString(){
		  String result = "";
		  for(int i=0;i<this.capacity;i++){
			  if(table[i]!=null){
				  EntryListNode cur = table[i].getHead();
				  while(cur!=null){
				      result = result + ((Entry)(cur.getEntry())).key().toString();
				      result = result + " / " + 
				      ((Entry)(cur.getEntry())).value().toString();
				      result = result + "  ";
				      cur = cur.getNext();
				      }
			  }
		  }
		  return result;
	  }
	  int compFunction(int code) {
	    // Replace the following line with your solution.
	      int result = 0;
	      result = Math.abs(code) % capacity;
	      return result;
	  }

	  /** 
	   *  Returns the number of entries stored in the dictionary.  Entries with
	   *  the same key (or even the same key and value) each still count as
	   *  a separate entry.
	   *  @return number of entries in the dictionary.
	   **/

	  public int size() {
	    // Replace the following line with your solution.
	      return size;
	  }

	  /** 
	   *  Tests if the dictionary is empty.
	   *
	   *  @return true if the dictionary has no entries; false otherwise.
	   **/

	  public boolean isEmpty() {
	    // Replace the following line with your solution.
	    return size == 0 ;
	  }

	  /**
	   *  Create a new Entry object referencing the input key and associated value,
	   *  and insert the entry into the dictionary.  Return a reference to the new
	   *  entry.  Multiple entries with the same key (or even the same key and
	   *  value) can coexist in the dictionary.
	   *
	   *  This method should run in O(1) time if the number of collisions is small.
	   *
	   *  @param key the key by which the entry can be retrieved.
	   *  @param value an arbitrary object.
	   *  @return an entry containing the key and value.
	   **/

	  public Entry insert(Object key, Object value) {
	    // Replace the following line with your solution.
	      int hashVal = compFunction(key.hashCode());
	      if(table[hashVal]==null)  table[hashVal] = new EntryList();
	      Entry now = new Entry();
	      now.key = key;
	      now.value = value;
	      table[hashVal].insertInList(now);
	      size++;
	      return now;
	  }
	  /** 
	   *  Search for an entry with the specified key.  If such an entry is found,
	   *  return it; otherwise return null.  If several entries have the specified
	   *  key, choose one arbitrarily and return it.
	   *
	   *  This method should run in O(1) time if the number of collisions is small.
	   *
	   *  @param key the search key.
	   *  @return an entry containing the key and an associated value, or null if
	   *          no entry contains the specified key.
	   **/
	  public Entry find(Object key) {
	    // Replace the following line with your solution.
		  int hashVal = compFunction(key.hashCode());
		  EntryList pos = table[hashVal];
		  if(pos==null) return null;
		  EntryListNode cur = pos.getHead();
		   System.out.println(((Entry)cur.getEntry()).key().toString() +
				   " " + ((Entry)cur.getEntry()).value().toString());
		  while(cur!=null){
			  if(((Entry)(cur.getEntry())).key()==key){
				  return (Entry)cur.getEntry();
			  }cur = cur.getNext();
		  }
		  return null;
		  
	  }
	  /** 
	   *  Remove an entry with the specified key.  If such an entry is found,
	   *  remove it from the table and return it; otherwise return null.
	   *  If several entries have the specified key, choose one arbitrarily, then
	   *  remove and return it.
	   *
	   *  This method should run in O(1) time if the number of collisions is small.
	   *
	   *  @param key the search key.
	   *  @return an entry containing the key and an associated value, or null if
	   *          no entry contains the specified key.
	   */

	  public Entry remove(Object key) {
	    
		  int hashVal = compFunction(key.hashCode());
		  EntryList pos = table[hashVal];
		  if(pos==null) return null;
		  EntryListNode cur = pos.getHead();
		  while(cur!=null){
			  if(((Entry)(cur.getEntry())).key()==key){
				  System.out.println(((Entry)cur.getEntry()).key().toString() +
						   " " + ((Entry)cur.getEntry()).value().toString());
				  cur.remove();
				  size--;
				  return (Entry)cur.getEntry();
			  }cur = cur.getNext();
		  }
		  return null;
	  }
	  /**
	   *  Remove all entries from the dictionary.
	   */
	  public void makeEmpty() {
	    // Your solution here.
		  for(int i=0;i<capacity;i++){
			  this.table[i] = null;
		  }size = 0;
	  }
	  public void countCollision(){
		  int numCo = 0;
		  int n = 0;
		  double exCo = size - capacity + capacity*Math.pow(1.0-1.0/capacity, size);
		  System.out.println("Expected Number of collisons is: "+ exCo+" ");
		  String result = "";
		  int rowCount = 0;
		  for(int i=0;i<capacity;i++){
			  if(this.table[i]==null) {
				  result = result+"[0]";
				  rowCount++;
				  if(rowCount==10){
					  result = result +"\n";
					  rowCount = 0;
				  }
			  }
			  else if(this.table[i].getListSize()>=1){
				  if(this.table[i].getListSize()>1) numCo++;
				  n++;
				  result = result+"[" + this.table[i].getListSize() +"]";
				  rowCount++;
				  if(rowCount==10){
					  result = result +"\n";
					  rowCount = 0;
				  }
				  
			  }
		  }
		  
		  System.out.println("Actual Number of collisons is: "+ numCo);
		  System.out.println(result);
		  System.out.println("Load factor is : " + 1.0*n/capacity);
	  }
}
